//* 데이터 타입 
// 데이터 타입은 데이터의 형태이다. 
// 크게 객체와 객체가 아닌 것으로 구분할 수 있다. 

// 1) 원시 데이터타입 
// 기본 데이터 타입 
// 숫자, 문자열, 불리언, null, undefined 

// 2) 객체 데이터 타입 
// 참조 데이터 타입 

// 레퍼 객체 
var str = 'coding';
console.log(str.length);
console.log(str.charAt(0));
// 문자열은 메소드를 가지고 있다. 그렇다면 객체이지 않은가? 
// -> 자바스크립트가 문자열을 작업할 때 임시로 객체를 만들고 제거하기 때문이다. 
// 이런 작업은 내부적으로 일어난다. 
// 작업이 끝나면 객체를 제거하고 원래의 원시데이터타입으로 돌아간다. 

// 문자열과 관련해서 객체지향적인 작업을 해야 할 때가 있다. 
// 원시 데이터 타입을 객체처럼 다룰 수 있게 하기 위한 객체를 레퍼객체라 한다. 
// 숫자는 Number, 문자는 String, 불리언은 Boolean이라는 레퍼 객체 존재 
// null과 undefined는 없음 

// 참조
// 복제: 전자화된 시스템의 가장 중요한 특징이다. 
// -> 프로그래밍 내에서 복제가 사용되는 것을 살펴보자. 
// 원시데이터 타입은 우리가 알고 있듯이 복사가 된다. 
// 객체는 조금 다른 방식으로 복제된다. 
// var a = {'id':1}; var b = a; 라고 했을 때 b는 a를 복제한다. 
// 그런데 이 경우 b의 id값을 2로 바꾸면 a에 담겨 있는 값도 바뀐다. 
// 이런 현상을 참조라고 한다. 

var a = {'id' : 1};
var b = a;
b.id = 2;
console.log(a.id);
// 2 

var a = {'id' : 1};
var b = a;
b = {'id' : 2}; 
console.log(a.id);
// 1
// 여기서 b라는 객체는 새로 만들어진 id값을 바라본다. 
// 새로운 데이터를 만들어 변수에 할당하면 복제같은 일이 일어남 

// 함수와 참조 
// 다음은 원시 데이터 타입을 인자로 넘겼을 때의 동작 모습이다. 
var a = 1; 
function func(b) {
    b=2;
}
func(a);
console.log(a); 
// b=a 이다 라는 명령 
// 그 다음 b = 2  
// a = 1, b = a, b = 2 이 순서대로 실행 
// 결과는 1이 된다. 

다음은 참조 데이터 타입을 인자로 넘겼을 때의 동작 모습이다.
var a = {'id':1};
function func(b) {
    b = {'id':2};
} 
func(a);
conso;e/log(a.id); 
// 1 
// a = {id:1}, b=a, b = {id:2} 이 순서대로 진행 
// 새로 만들어진 데이터가 할당되었으므로 연결은 없다. 

아래는 다르다. 
var a = {'id':1};
function func(b) {
    b.id = 2;
} 
func(a);
conso;e/log(a.id); 
// 2 
// 이 경우 a와 b는 같은 것을 참조한다. 