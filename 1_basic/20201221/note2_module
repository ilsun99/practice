//* 모둘
// 프로그램은 작고 단순한 것에서 크고 복잡한 것으로 진화한다.
// 그 과정에서 재활용성을 높이고 유지보수를 쉽게 할 수 있는 기법들이 사용된다. 
// 그 중 하나가 코드를 여러 개의 파일로 분리하는 것이다. 

// 모듈의 효과 
// 자주 사용되는 코드를 필요할 때마다 재활용 가공하는능
// 코드를 개선하면 이를 사용하는 모든 애플리케이션의 동작이 개선 
// 코드 수정 시 필요한 로직 빠르게 찾을 수 있는음
// 필요한 로직만 로드해서 메모리 낭비 줄일 수 있음 
// 한 번 다운로드된 모듈은 웹브라우저에 의해 저장되므로 동일한 로직을 로드할 때 시간, 트래픽 절약

// 호스트 환경이란?
// 자바스크립트는 모듈이라는 기능이 명확하지 않고, 자체적으로 제공하지 않는다 
// 단, 자바스크립트가 구동되는 환경을 호스트환경이라고 하는데,
// 이에 따라 자바스크립트 로직을 파일로 나눠 다른 언어에서의 모듈처럼 사용 가능 
// 호스트 환경에 따라 모듈을 사용할 수 있는 방법이 다르다. 

// 라이브러리 
// 라이브러리는 모듈과 비슷한 개념
// 모듈이 프로그램을 구성하는 작은 부품으로서의 로직 
// 라이브러리는 자주 사용되는 로직을 재사용하기 편하도록 정리한 코드의 집합 
// 프로그래밍에서는 훌륭한 라이브러리가 많다. 

// jQuery 
// 홈페이지에서 다운: http://jquery.com/
// 메뉴얼: http://api.jquery.com/

// 웹브라우저와 자바스크립트가 제공하는 기능이 할 수 없는 것은 어떠한 라이브러리도 할 수 없다.
// 브라우저가 제공하는 기능은 자유도가 높아 파편적이다. 
// 라이브러리는 웹페이지를 쉽게 제어한다거나, 서버와 쉽게 통신한다거나 
// 목적을 쉽게 달성할 수 있도록 하는 코드 집합 
// 라이브러리를 적절히 이용하면 업무 속도가 굉장히 빨라진다. 

// 사용법
// jQuery 다운로드 
// API Documentation 참고, jQuery가 어떤 기능을 제공하는지 볼 수 있음 
// 생활코딩 jQuery 참조 
// 파일을 카피해서 긁어온 다음 파일을 만든다.
// 모듈 부르는 방식으로 jQuery파일을 불러온다. 
// 네트워크 상태를 확인해서 잘 로드되었는지 확인한다.
// $('#list li').text('coding everybody');
// -> id 값이 list이고, 하위 태그가 li인 태그를 가리킨다. 
// <input type='button' value='execute' id='execute_btn'/>
// -> execute 버튼 생성
// $('#execute_btn').click(function(){
    $('#list li').text('coding everybody');
})
// -> excute를 눌렀을 때 텍스트가 바뀌도록 한다. 
