//* 함수는 함수의 리턴값으로 사용할 수 있다. 

function cal(mode){
    var funcs = {
        'plus' : function(left, right){return left + right},
        'minus' : function(left, right){return left - right}
    }
    return funcs[mode];
}
alert(cal('plus')(2,1)); // 3
alert(cal('minus')(2,1));

// 함수는 배열의 값으로도 사용할 수 있다 
var process = [
    function(input){ return input + 10;},
    function(input){ return input * input;},
    function(input){ return input / 2;}
];
var input = 1;
for(var i = 0; i < process.length; i++){
    input = process[i](input);
}
alert(input); //60.5 

// first-class citizen/object 
// 변수, 매개변수, 리턴값 등으로 사용될 수 있는 형태의 데이터 

// 콜백 
// 값으로서의 함수와 밀접하게 연결
// 어떠한 함수가 수신하는 인자가 함수인 경우가 콜백이다. 

function sortNumber(a,b){
   if(a > b) {
       return 1; 
   } else if (a < b) {
       return -1;
   } else {
       retun 0;
   }
   }
// 리턴값을 어떻게 하느냐에 따라서 a와 b를 비교하여 어떤 것이 크고 작은지 판단하고
// 그 기준에 따라 정렬한 것을 알려준다. 

   function sortNumber(a,b){
       return b - a;
   }
   
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; // 배열객체이다. 
alert(numbers.sort(sortNumber)); // array, [20,10,9,8,7,6,5,4,3,2,1]
// 여기서 sort는 객체에 포함되기 때문에 메소드라 한다. 내장메소드, 빌트인메소드라 함 
// 음수, 양수, 0을 산출하냐에 따라 정렬이 달라진다. 

// sort라는 함수는 인자로 함수를 받는다. 
// 여기서 다른 함수인 sortNumber를 정의해서 인자로 전달하면 원하는 대로 산출할 수 있다.
// 이때 sortNumber가 콜백함수인 것이다. 