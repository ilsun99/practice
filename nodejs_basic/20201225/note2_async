//* 비동기 처리
// 콜백은 비동기 처리에서도 유용하다. 

// 홈페이지를 운영하는데 1만명 정도 구독자가 있다. 
// 이 홈페이지는 글을 작성하면 구독자들에게 이메일을 발송한다. 
// 한 발송 당 1초가 걸려도 하나씩 보내면 3시간 가까이 걸린다. 
// 글작성 - 이메일 발송 - 작성완료 이 단계에서 이메일 발송을 할 때 순차적으로 진행하면 동기적 처리
// 이메일 발송하는 부분에서 예약하고 작성완료를 끝낼 수 있다면 금방 끝난다. 
// 내부적으로 사용자에게 노출되지 않는 프로그램이 발송 예약을 확인해서 처리한다. 
// 기억해두었다가 백그라운드에서 작업을 한다. 
// 이런 방식을 비동기적인 처리라고 한다. 

//* Ajax
// A: asynchronous 비동기, J: Javascript 
// 웹페이지에서 어떤 정보를 변경할 때는 새로 페이지를 다운받는다. 
// 웹페이지에서 리스트를 누를 때 페이지에는 없지만 정보를 가져올 때가 있다.
// 웹페이지를 리로드하지 않고 정보를 불러오는 것이 가능하다. 
// 이때 Ajax 기법을 사용하는 것 
// 무언가를 클릭했을 때 웹페이지를 변경하지 않고 서버와 브라우저가 내부적으로 통신하는 기법
// 이 기능 덕분에 웹이 문서를 넘어 애플리케이션이 될 수 있었다. 

// 만약 동기처리하면 리스트를 눌렀을 때 통신이 지연되는 경우 페이지가 멈춘다 
// 서버와 브라우저는 내부적으로 통신을 진행하고 있고, 그동안 다른 곳을 볼 수 있는 게 비동기적 처리

// jQuey를 이용하면 이런 비동기 처리를 쉽게 할 수 있다. 
// 이 과정에서 콜백을 사용한다. 
// 보기만 하자! 

datasource.json.js
{"title":"JavaScript","author":"egoing"}

<!DOCTYPE html>
<html>
<head>
<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
</head>
<body>
<script type="text/javascript">
    $.get('./datasource.json.js', function(result){
        console.log(result);
    }, 'json');
</script>
</body>
</html>
// get은 url 다음에 함수를 인자로 받고, 그 함수는 url에 있는 데이터를 인자로 받는다. 
// 콜백을 통해 사용자가 일부분을 제어할 수 있기 때문에 가능
// Ajax를 콜하는 것은 get을 통해 동일하게 이루어지고
// 가져온 정보로 무엇을 할 것인지는 사용자가 지정, 비즈니스 로직이라고 함 
// 사용자에게 무슨 일을 할지 위임하고, 이를 사용자는 콜백을 통해 함수를 인자로 주어 동작을 한다.

// 값으로서의 함수를 잘 이해하면 javascript를 이해하는 데에 중요한 역할을 한다. 