//오리엔테이션 

//javascript: 웹브라우저라는 소프트웨어들을 프로그래밍적으로 제어하기 위한 것 
//프로그래밍적 제어: 브라우저에 코드를 제출하면 브라우저가 하나하나 해석해서 만들어줌 
//<input type="button" onclick="alert(hello world)" value="hello world" />
//여기서 alert('hello world') 이런 언어가 javascript 
//사용자가 어떤 버튼을 클릭했을 때 어떤 기능이 발생하도록 하게 하고 싶다면 javascript를 해야 한다. 


//*탈 웹브라우저 
//-> javascript가 더 이상 브라우저에서를 제어하기 위한 용도로만 동작하지 않는다. 
//-> javascript라는 언어와 환경을 분리해서 생각할 필요성 등장 
//-> 웹서버를 동작하기 위한 도구, server-side-script 즉, nodejs 
//웹 서버 - 웹 - 웹브라우저 가 있고, 원래 javascript는 웹브라우저를 제어하기 위한 언어였는데
//javascript를 웹 서버에서 사용할 수 있도록 함 -> 사용자가 주소를 입력하면 그 컴퓨터를 찾아 요청하게 된다. 
//웹서버는 사용자가 요청한 정보를 웹브라우저에 응답, 웹서버에 존재하면서 웹브라우저에 응답하기 위한 기술이 PHP JAVA PYTHON
//웹서버를 제어하기 위한 기술, 웹브라우저를 제어하기 위한 기술로서 javascript  
//사용자가 요청하면 javascript가 응답할 수 있음! -> 브라우저에서 벗어나 웹서버까지 활동 

//*탈웹 
//-> 웹에서 사용되던 javascript가 웹 밖에서도 사용됨 
//ex) 구글 애플리케이션 스크립트 

//*환경
//언어를 사용하는 대상이 바로 환경 
//ex) ~해주세요 는 한국어, 이를 개발자, 의사, 변호사에게 각각 다른 의미로 사용 
//기본적으로 한국어로 대화하지만 그 사람이 할 수 있는 일이 무엇인지 숙지하고 있어야 한다. 
//javascript라는 언어 ~('hello world'); 를 사용하지만 
//웹에서 사용하냐, nodejs냐, 스프레드시트에서 각각 alert, write, msgbox로 나타남
//이때 언어는 javascript, 환경은 웹, nodejs, 스프레드시트 

//사용자는 주어진 ui, 즉 버튼을 통해 시스템을 제어한다. 
//개발자는 코드를 사용하여 시스템을 직접 제어하고, 이는 사용자가 이용할 수 있는 시스템을 제공하는 것이다. 