//* 배열 array 
// 연관된 데이터를 모아서 통으로 관리하기 위해 사용하는 데이터 타입 
// 데이터를 담는 그릇이라고 할 수 있다. 
// 변수가 하나의 데이터를 저장하기 위한 거싱라면 배열은 여러 개의 데이터를 하나의 변수에 저장 

var member = ['egoing', 'k8805', 'sorialgi']
alert(member[0]);
alert(member[1]);
alert(member[2]);

// 배열 안에 있는 각각의 데이터를 원소라고 한다. 
// [] 를 사용해서 원소를 불러올 수 있다. 이때 0부터 시작 
// 색인 index : 0부터 시작하는 배열의 자릿값 

//* 배열의 효용 
function get_member1 () { 
    return 'egoing';
}
document.write(get_member1());

function get_member2 () { 
    return 'ilsun';
}
document.write(get_member2()); 

function get_member3 () { 
    return 'sunny';
}
document.write(get_member3()); 

// 함수는 입력값은 여러 개를 넣을 수 있지만 출력값은 하나이다. 

function get_members() {
    return ['egoing', 'ilsun', 'sunny'];
}

var mebers = get_members();
document.write(members[0]);
document.write(members[1]);
document.write(members[2]);


//* 배열과 반복문 
// 배열의 index를 모두 기억하기는 어렵다. 
// 배열에 담긴 값을 하나씩 꺼내서 가공하는 것이 핵심적인 요소이다. 
// 이 작업을 반복문으로 할 수 있다. 

function get_members(){
    return ['egoing', 'k8805', 'sorialgi'];
}
members = get_members();
// members.length는 배열에 담긴 값의 숫자를 알려준다. 
for(i = 0; i < members.length; i++){
    // members[i].toUpperCase()는 members[i]에 담긴 문자를 대문자로 변환해준다.
    document.write(members[i].toUpperCase());   
    document.write('<br />');
}

//* 배열의 제어
// 배열의 데이터 추가, 삭제, 삽입, 등 
//1) 배열의 크기: length 사용

//2) 배열의 추가: 배열의 끝에 원소를 추가하는 방법으로 push를 사용 
// 배열을 추가하기 위해서는 concat 사용 

var li = ['a', 'b', 'c']; 
li.push('d');
alert(li); 

var li = ['a', 'b', 'c']; 
li.concat(['d', 'e']);
alert(li); 

//3) 배열의 추가: 배열의 첫머리에 원소를 추가하는 방법으로 unshift를 사용

var li = ['a', 'b', 'c']; 
li.unshift('z');
alert(li); 

//4) 배열의 삭제와 삽입: 배열의 중간에 원소를 삭제하거나 삽입하는 방법으로 splice를 사용 

var li = ['a', 'b', 'c']; 
li.splice(1, 1, 'x', 'y', 'z'); // splice(index, howmany, elemnt1, ,,, ,element10)
alert(li); 
// a = ['a', 'x', 'y', 'z', 'c'] 
//index: 배열에 추가할 특정 배열의 위치를 가리키는 index 
//howmany: index에서부터 삭제될 원소들의 수, index+howmany에 해당이면 삭제 
//elements: 삽입될 원소들 
// 삭제된 데이터를 리턴하는 기능도 있음 

//5) 원소의 제거: 첫번째 원소를 제거하는 방법으로 shift 사용 

var li = ['a', 'b', 'c']; 
li.shift();
alert(li); 
// a 삭제 

//6) 원소의 제거: 마지막 원소를 제거하는 방법으로 pop 사용

var li = ['a', 'b', 'c']; 
li.pop();
alert(li); 
// c 삭제 

//6) 원소의 정렬
// 프로그래밍에서 정렬은 굉장히 중요한 요소이다. 
// 어떻게 빠른 정렬을 할 수 있는지 연구하는 것이 알고리즘 
// 프로그래밍 언어는 여러 정렬 방법을 가지고 있다. 

var li = ['c', 'b', 'a', 'e', 'd']; 
li.sort();
alert(li); 
// ['a', 'b', 'c', 'd', 'e']

var li = ['c', 'b', 'a', 'e', 'd']; 
li.reverse();
alert(li); 
// 역순으로 정렬 

// 이는 javascript가 스스로 상정하고 있는 정렬 방법
// 다른 정렬을 보고 싶으면 sort라는 메소드 참고
// array.sort(sortfunction)를 사용하면 우리가 원하는 방식으로 정렬 가능 
