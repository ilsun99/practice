//* 정적 파일 서비스 
// 정적 파일: 사람이 그냥 작성한 것, 한 번 만들어지면 계속 같음 
// 동적 파일: 프로그램적으로 구현된 것 

// 정적인 파일이 못하는 일 
// -> 코딩으로 구현해야 하는 일들, 반복문, 조건문 등 
// 자바스크립트 안에서 html을 작성하는 것이 어렵기 때문에 정적, 동적 파일을 잘 사용해야 함 
// 정적 파일과 동적 파일의 장점만을 취하는 방법이 없을지 고민 -> 템플릿 엔진

// 템플릿 엔진 
// html태그를 자동으로 만들어준다. 
// 템플릿 엔진 설치하고 set으로 디렉토리 설정 
// 템플릿 엔진 사용하려면 render로, 객체를 정의하면 변수를 사용할 수 있음 

//* 입력과 출력 
// 사용자가 어떤 주소로 접근하냐에 따라 다른 결과를 보여준다.
// 여러 path를 제공해서 서로 다른 출력을 만들어낸다. 
// http:a.com/login, home, 등등 -> path라고 함 
// path도 경우에 따라서 다른 상태를 보여주도록 해야 한다.  
// http://a.com/topic?id=1 -> topic이라는 라우터에 id가 1인 값을 전달 
// topic은 1이라는 값에 맞는 결과를 처리해서 화면에 보여준다.
// 하나의 라우터로 id값에 따라 다른 결과를 만들어낼 수 있다. 
// 이러한 ? 뒤의 정보는 query string이라고 한다. 
// 전체를 url이라고 한다.


//* 시멘틱 url
// 쿼리스트링 없이 /로 주소가 나오는 것 


//* Get과 Post 방식 
// get: 웹브라우저의 주소를 입력해서 어떠한 정보를 가져오는 것 
// -> 어떤 정보를 서버에 요청해서 가져오는 것 
// post: 사용자의 정보를 서버로 전송하는 기능 
// ex. 사용자의 아이디나 패스워드를 전송, 글을 서버로 전송 
// -> 사용자의 정보를 서버로 전송 

//# bodyparser
// use는 모듈을 애플리케이션에 붙이는 역할
// 이 애플리케이션으로 들어오는 모든 요청은 이 미들웨어를 거쳐 들어온다.
// 사용자가 post방식으로 전달한 객체가 있다면 req객체가 가지고 있지 않은 body라는 객체를 추가
// body라는 객체에 title, description이라는 속성을 넣고 사용자에게 제공 

//* get과 post의 용도 
// get을 사용하면 입력한 정보가 url에 노출되어버린다. 
// url상에 정보가 노출되지 않는 방식인 post가 쓰여야 할 때가 있다. 
// 그러나 둘 다 불안전하기는 하다. 
// 굉장히 긴 글을 서버에 전달할 때에도 url에 담기에는 손실이 날 수 있다. 
// get방식으로 전송된 데이터는 쿼리스트링으로 나타난다. 
// post방식으로 전송된 데이터는 url에 나타나지 않고 서버에만 전달된다. 
// post방식으로 전송된 데이터를 읽기 위해서는 bodyparser라는 미들웨어를 로드해야함 
// request객체에 body가 추가된다. 